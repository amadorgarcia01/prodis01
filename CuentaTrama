#!/usr/bin/env node

var pcap = require("../pcap"), pcap_session;
    
if (process.argv.length > 4) {
    console.error("usage: simple_capture interface filter");
    console.error("Examples: ");
    console.error('  simple_capture "" "tcp port 80"');
    console.error('  simple_capture eth1 ""');
    console.error('  simple_capture lo0 "ip proto \\tcp and tcp port 80"');
    process.exit(1);
}

function EstablecerSesion() {
    pcap_session = pcap.createSession(process.argv[2], process.argv[3]);

    // Muestra informaci칩n del dispositivo de red por donde est치 escuchando la aplicaci칩n

    console.log("Escuchando por el dispositivo: ");
    pcap_session.findalldevs().forEach(function (dev) {
        var ret = "    ";
        if (pcap_session.device_name === dev.name) {
            ret += "* ";
            ret += dev.name + " ";
            if (dev.addresses.length > 0) {
                ret += dev.addresses.filter(function (address) {
                    return address.addr;
                }).map(function (address) {
                    return address.addr + "/" + address.netmask;
                }).join(", ");
            } else {
                ret += "Error: No se encontr칩 dispositivo para escuchar";
            }
            
            console.log(ret);
           
           }
    });

}

try {

        EstablecerSesion();

} catch (err) {
    EstablecerSesion();
}

// Listen for packets, decode them, and feed the simple printer.  No tricks.
pcap_session.on("packet", function (raw_packet) {
    var packet = pcap.decode.packet(raw_packet);
    var header = packet.pcap_header;

    console.log(packet.payload.toString());
});
